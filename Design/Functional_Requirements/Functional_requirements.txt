The Functional requirements:
1) The plants should have a lifecycle and condition that needs to be taken cared of (overgrown, dehydration) which can be handled as a state.
2) The plants have different watering, pruning and fertilising method for a certain way of plant care (bonsai,topiary,espalier, kokedama, normal) which can be done using a strategy
3) There needs to be a single manner of keep track of the inventory and only one instance of an Inventory for better tracking and eliminating inconsistencies between data stored in the inventory this can be done using a singleton.
4) The plants need some container to be easily stored in so new plants can be easily added and this container needs some way to be iterated through this would be done using the iterator pattern.
5) New plants need to be created by when a type of plant is ordered for a restock this could be done using a factory method to have access to the constructor of the certain plant type.
6) The gardener need to be made aware of the different plants conditions so that they can attend to the plant this is done using an observer design pattern for the plants to notify the gardener
7) The staff need to communicate with each to complete certain tasks through delegation to another that can do the task this can be done using a chain of responsibility to pass the requests.
8) There needs to be a way to transfer internal requests within the system this can be done using a command pattern.
9) The customer needs to be able to personalise there order with different arrangements of plants.
10) The customer's order personalisation needs to be able to cater for a plant being wrapped and have a decor pot in the order this can be done using a decorator.
11) There needs to be a way for the customer to add a plant to the order and undo that action this can be done using a command pattern it could even help to delay the addition of objects to an order to make it easier to cancel an order.
12) The system needs some way to show a payment being declined and allowing the customer to go their order again this can be done using a state.
13) There needs to be an easy way to travel through areas of plants or storage containers of plants.
14) The plants need to show that they can die from age because they are an old plant and that they can die if their condition becomes really bad and the dying from both should behave the same way this can be done using a adapter.
15)The needs to be some way to store the plants that are in an order as groups this can be done using the composite desing pattern.

Non-functional requirements:
1) The singleton helps with reliability because it is a single instance therefore there are no inconsistencies between the instances of inventories.
2) The performance has an increase because the PlantArea improves finding a certain type of plant
3) There is maintainability because there will be documentation of the code using doxygen.